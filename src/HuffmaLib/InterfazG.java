/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package HuffmaLib;

import javax.swing.JOptionPane;
import java.io.*;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author josed
 */
public class InterfazG extends javax.swing.JFrame {

    String top;
    /**
     * Creates new form InterfazG
     */
    Diccionario jd[];

    public InterfazG() {
        initComponents();
    }

    public InterfazG(String n) {
        initComponents();
        top=n;
        carga.setText(top);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CConte = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        carga = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        reletras = new javax.swing.JTextArea();
        Calcular = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        texdescom = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        diccionariotex = new javax.swing.JTextArea();
        descompre = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        CConte.setBackground(new java.awt.Color(102, 102, 102));

        carga.setBackground(new java.awt.Color(153, 153, 153));
        carga.setColumns(20);
        carga.setRows(5);
        jScrollPane1.setViewportView(carga);

        reletras.setBackground(new java.awt.Color(153, 153, 153));
        reletras.setColumns(20);
        reletras.setRows(5);
        jScrollPane2.setViewportView(reletras);

        Calcular.setBackground(new java.awt.Color(153, 153, 153));
        Calcular.setText("<=Compresion");
        Calcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalcularActionPerformed(evt);
            }
        });

        texdescom.setBackground(new java.awt.Color(153, 153, 153));
        texdescom.setColumns(20);
        texdescom.setRows(5);
        jScrollPane3.setViewportView(texdescom);

        diccionariotex.setBackground(new java.awt.Color(153, 153, 153));
        diccionariotex.setColumns(20);
        diccionariotex.setRows(5);
        jScrollPane4.setViewportView(diccionariotex);

        descompre.setBackground(new java.awt.Color(153, 153, 153));
        descompre.setText("descompresion =>");
        descompre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descompreActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel1.setText("Diccionario");

        jLabel2.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel2.setText("Huffman");

        jLabel3.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel3.setText("Compresion");

        jLabel4.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel4.setText("Repitencia");

        jLabel5.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel5.setText("Descompresion");

        javax.swing.GroupLayout CConteLayout = new javax.swing.GroupLayout(CConte);
        CConte.setLayout(CConteLayout);
        CConteLayout.setHorizontalGroup(
            CConteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CConteLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(CConteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(CConteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CConteLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(CConteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Calcular, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(descompre, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(93, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CConteLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CConteLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(CConteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CConteLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(189, 189, 189))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CConteLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(180, 180, 180))))
            .addGroup(CConteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(CConteLayout.createSequentialGroup()
                    .addGap(413, 413, 413)
                    .addComponent(jLabel2)
                    .addContainerGap(468, Short.MAX_VALUE)))
            .addGroup(CConteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(CConteLayout.createSequentialGroup()
                    .addGap(107, 107, 107)
                    .addComponent(jLabel3)
                    .addContainerGap(774, Short.MAX_VALUE)))
            .addGroup(CConteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(CConteLayout.createSequentialGroup()
                    .addGap(123, 123, 123)
                    .addComponent(jLabel4)
                    .addContainerGap(758, Short.MAX_VALUE)))
        );
        CConteLayout.setVerticalGroup(
            CConteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CConteLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(CConteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(CConteLayout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(Calcular)
                        .addGap(18, 18, 18)
                        .addComponent(descompre)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(CConteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                    .addComponent(jScrollPane4))
                .addGap(48, 48, 48))
            .addGroup(CConteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(CConteLayout.createSequentialGroup()
                    .addGap(30, 30, 30)
                    .addComponent(jLabel2)
                    .addContainerGap(553, Short.MAX_VALUE)))
            .addGroup(CConteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(CConteLayout.createSequentialGroup()
                    .addGap(30, 30, 30)
                    .addComponent(jLabel3)
                    .addContainerGap(553, Short.MAX_VALUE)))
            .addGroup(CConteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CConteLayout.createSequentialGroup()
                    .addContainerGap(356, Short.MAX_VALUE)
                    .addComponent(jLabel4)
                    .addGap(227, 227, 227)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1008, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(CConte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 609, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(CConte, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalcularActionPerformed
        // TODO add your handling code here:
        try {
            String en = carga.getText().toLowerCase();
            char mp[] = en.toCharArray();
            String car = "";
            String lib = "";
            Libreria nuevo = new Libreria();
            Repitencia let[] = Letras(en);
            if (!en.equals("")) {

                //Ordenar(let);
                for (int i = 0; i < let.length; i++) {
                    if (let[i] != null) {
                        car = car + "Letra: " + String.valueOf(let[i].getLetra()) + "- rep: " + String.valueOf(let[i].getRepi()) + "; \n";
                    }
                }
                reletras.setText(car);
            }
            jd = new Diccionario[let.length];
            nuevo.GenerarArbol(let, jd);
            for (int i = 0; i < jd.length; i++) {
                lib = lib + "letra: " + String.valueOf(jd[i].getSimbolo()) + " -> Bits:" + jd[i].getBinario() + "; C: " + jd[i].getCc() + "\n";
            }
            diccionariotex.setText(lib);
            Enviar(CodigoHuffman(mp, jd));

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Esriba un parrafo XXXXXXX");
        }
    }//GEN-LAST:event_CalcularActionPerformed

    private void descompreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descompreActionPerformed
        // TODO add your handling code here:
        texdescom.setText(Carga());
        JOptionPane.showMessageDialog(null, "Descomprimido Exitoso");
    }//GEN-LAST:event_descompreActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazG().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CConte;
    private javax.swing.JButton Calcular;
    private javax.swing.JTextArea carga;
    private javax.swing.JButton descompre;
    private javax.swing.JTextArea diccionariotex;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea reletras;
    private javax.swing.JTextArea texdescom;
    // End of variables declaration//GEN-END:variables
public Repitencia[] Letras(String n) {
        char l[] = n.toCharArray();
        char l2[] = n.toCharArray();
        int cuenta = 0;
        int ll = 0;
        Repitencia dev[] = new Repitencia[n.length()];
        for (int i = 0; i < l.length; i++) {
            cuenta = 0;
            for (int j = 0; j < l2.length; j++) {
                if (l[i] == l2[j]) {
                    cuenta++;
                }
            }
            if (cuenta != 0) {
                if (String.valueOf(l[i]).equals("\n")) {
                    if (isExiste('S', dev)) {
                        LlenarV('S', cuenta, dev);
                        ll++;
                    }

                } else if (isExiste(l[i], dev)) {
                    LlenarV(l[i], cuenta, dev);
                    ll++;
                }

            }
        }
        Repitencia retor[] = new Repitencia[ll];
        Pasar(retor, dev, ll);
        return retor;
    }

    public void LlenarV(char n, int n2, Repitencia[] n3) {
        for (int i = 0; i < n3.length; i++) {
            if (n3[i] == null) {
                n3[i] = new Repitencia(n, n2);
                break;
            }
        }
    }

    public void Pasar(Repitencia n[], Repitencia v[], int f) {
        for (int i = 0; i < f; i++) {
            n[i] = v[i];
        }
    }

    public void Ordenar(Repitencia[] n) {
        for (int i = 0; i < n.length - 1; i++) {
            for (int j = 0; j < n.length - 1; j++) {
                if (n[j].getRepi() > n[j + 1].getRepi()) {
                    Repitencia tmp = n[j + 1];
                    n[j + 1] = n[j];
                    n[j] = tmp;
                }
            }
        }
        for (int i = 0; i < n.length; i++) {
            System.out.print(n[i].letra + "\n");
        }
    }

    public boolean isExiste(char b, Repitencia n[]) {
        for (int i = 0; i < n.length; i++) {
            if (n[i] != null && b == n[i].getLetra()) {
                return false;
            }
        }
        return true;
    }

    public String CodigoHuffman(char arr[], Diccionario arr2[]) {
        String dev = "";
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr2.length; j++) {
                if (arr[i] == arr2[j].getSimbolo()) {
                    dev = dev + arr2[j].getBinario() + " ";
                    break;
                } else if (arr[i] == '\n' && jd[j].getSimbolo() == 'S') {
                    dev = dev + arr2[j].getBinario() + " ";
                    break;
                }
            }
        }
        return dev;
    }

    private void Comprimir(String comprimido, File donden) {
        FileWriter guardar;
        try {

            guardar = new FileWriter(donden, true);
            guardar.write(comprimido);
            guardar.close();

        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Error al guardar, ponga nombre al archivo");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Error al guardar, en la salida");
        }
    }

    public void Enviar(String compri) {

        try {
            JFileChooser guardar = new JFileChooser();
            FileNameExtensionFilter texfiltro = new FileNameExtensionFilter("EDD", "edd");
            guardar.setFileFilter(texfiltro);
            guardar.addChoosableFileFilter(texfiltro);
            guardar.showSaveDialog(null);
            guardar.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            File archivo = guardar.getSelectedFile();
            Comprimir(compri, archivo);
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "No elijio archivo donde guardar ");
        }
    }

    public String Carga() {
        String[] psplitPM = null;
        String[] ssplitPOR = null;
        String cadena = "", temp = "", descom = "";
        JFileChooser rutachooser = new JFileChooser();
        FileNameExtensionFilter textfiltro = new FileNameExtensionFilter("EDD", "edd");
        rutachooser.setFileFilter(textfiltro);
        rutachooser.addChoosableFileFilter(textfiltro);
        Scanner Txtr = null;
        rutachooser.showOpenDialog(rutachooser);
        try {
            String rutanueva = rutachooser.getSelectedFile().getAbsolutePath();
            File extraer = new File(rutanueva);
            FileReader ee = new FileReader(extraer);
            BufferedReader bb = new BufferedReader(ee);
            while ((temp = bb.readLine()) != null) {
                cadena = cadena + temp;
            }
            bb.close();
            psplitPM = cadena.split(" ");
            for (int i = 0; i < psplitPM.length; i++) {

                for (int j = 0; j < jd.length; j++) {
                    if (psplitPM[i].equals(jd[j].getBinario())) {
                        if (jd[j].getSimbolo() == 'S') {
                            descom = descom + "\n";
                        } else {
                            descom = descom + String.valueOf(jd[j].getSimbolo());
                        }
                    }

                }
            }
            return descom;

        } catch (FileNotFoundException e) {
            System.out.println(e.getMessage());
        } catch (NullPointerException e) {
            System.out.println("No se ha seleccionado ningún fichero");
        } catch (Exception e) {
            System.out.println(e.getMessage());
        } finally {
            if (Txtr != null) {
                Txtr.close();
            }
        }
        return "";
    }
}
